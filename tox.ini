# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static, unit

[vars]
# These need to be relative paths because autopep8 doesn't handle absolute
# paths with relative paths in "exclude" correctly.
src_path = ops/
tst_path = test/
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  MODEL_SETTINGS

[testenv:docs]
description = Build the Sphinx docs
deps =
    -r{toxinidir}/docs/requirements.txt
commands =
    sphinx-build -W --keep-going docs/ docs/_build/html

[testenv:fmt]
description = Apply coding style standards to code
deps =
    -r{toxinidir}/requirements-dev.txt
commands =
    isort {[vars]all_path}
    autopep8 --in-place {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    -r{toxinidir}/requirements-dev.txt
commands =
    # pflake8 wrapper suppports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    autopep8 --diff {[vars]all_path}

[testenv:static]
description = Run static type checker
deps =
    -r{toxinidir}/requirements-dev.txt
commands =
    pyright {posargs}

[testenv:unit]
description = Run unit tests
passenv =
    RUN_REAL_PEBBLE_TESTS
    PEBBLE
deps =
    -r{toxinidir}/requirements-dev.txt
commands =
    coverage run --source={[vars]src_path} \
             -m pytest --ignore={[vars]tst_path}smoke -v --tb native {posargs} 
    coverage report

[testenv:pebble]
description = Run real pebble tests
allowlist_externals = pebble
                      mkdir
                      bash
setenv =
  PEBBLE=/tmp/pebble
  RUN_REAL_PEBBLE_TESTS=1
deps =
    -r{toxinidir}/requirements-dev.txt
commands =
    bash -c "umask 0; (pebble run --http=':4000' --create-dirs &>/dev/null & ) ; sleep 1; pytest -v --tb native test/test_real_pebble.py {posargs} ; killall -y 3m pebble"

[testenv:smoke]
description = Run a smoke test against a Juju controller.
allowlist_externals = juju
                      charmcraft
                      bash
deps =
    -r{toxinidir}/requirements-dev.txt
commands =
    # Build a source tarball for ops, and drop it into the root directory of the smoke test charm.
    bash -c 'rm -vf ./test/charms/test_smoke/*.tar.gz  # Cleanup old builds'
    python {toxinidir}/setup.py sdist --dist-dir={toxinidir}/test/charms/test_smoke/
    # Inject the tarball into the smoke test charm's requirements.
    bash -c 'echo "./$(ls -1 ./test/charms/test_smoke/ | grep tar.gz)" > ./test/charms/test_smoke/requirements.txt'

    # Run our smoke tests (this will build the charm, then run the tests).
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/test/smoke/
